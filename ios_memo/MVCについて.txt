【MVCについて】--------------------------------------------
Model：アプリケーションの状態を表すもの＆状態の加工メソッド、この二つをまとめたもの
Controller：Modelの加工メソッドの操作＆Viewの操作をするもの
View：Modelの状態を参照し視覚表現するもの


【プロジェクト構造について】--------------------------------------------
[Commons]
MVCを問わずどこでも使える汎用的なクラスを置きます。ConfigやUtility系のクラスはここに配置します。
ここにCategoryグループ等を作る場合もあります。

[Controllers]
主にViewControllerを置きます。
直下には置かずHome画面(機能)であればHomeグループを作ります。
その下に、HomeViewController及びHomeViewControllerのChildViewControllerをまとめて配置します。

[Views]
Viewを配置します。
画面単位でグループを切りわけて、Home画面であればHomeView及び紐付くSubViewをまとめて配置します。
Storyboardやxibなどもここに配置します。

[ViewModels](オプション)
主にDataSourceを配置します。
目的はViewControllerからDataSourceを切り離す事です。
DataSourceそのものとDataSourceに関する処理を含みます。
ViewControllerが肥大化してから切り離す場合もあります。

[Models]
データ関連のクラスを置きます。DBだけでなく、APIからのデータ取得などの処理もデータ単位でクラス化します。
ModelクラスそのものとModelに関する処理をするクラスに分けるのが一般的です。

[Resources]
画像や音声ファイル等を置きます。


【実装方法について】--------------------------------------------
[View]
描画処理などを全て実装する。色、形、自身のアニメーション方法など。ユーザーへの出力に相当する。
自身へのsubViewの配置などを処理する場合もある。
多くのViewはユーザーイベント(入力)を検知する実装が標準で備わっているが、Viewはそのイベントを検知するだけで基本的に何も処理してはならない。全ての基本的なイベントはControllerに提供するイベントハンドラ又はデリゲートとして実装する。(UIResponderの各種touchesイベント、UIControlのtarget-action、各種GestureRecognizer、各種delegate(datasource)、Notification、blocks、etc)

[Controller]
Viewの生成と配置。各種イベントの処理(イベントをModelに反映する等)。Modelの変更通知を何らかの手段で、対象とするViewに伝えられるように設定する(Modelの通知先をViewに設定する。Viewが参照すべきModel又はViewModelを設定するなど)。画面遷移。etc
ここをいかにスリムに実装するかが鍵となる。目安として、小さいプロジェクトであれば500行程度、大きいプロジェクトであれば1000行程度を超えるControllerは再設計の検討を考慮する。
Controllerの主な特徴は「何のViewがあるか(Viewの追加削除を含む)」「何のModelがあるか」「どんなイベントを処理するか」「画面遷移処理」だけとなる。それ以外の特徴を持つControllerは再設計の検討を考慮する。

[Model]
ほぼ構造体のようなModelクラスとそのModelクラスに直接変更を加える全ての処理を実装したManagerクラス。Managerクラスにはイベントをデータ変更処理に変換するロジックと実際にデータを変更するロジック及びその変更を通知するための実装がある。
データ変更の通知には、delegate(同期処理のみ)、Notification、KVO、blocksなどがある。
delegateは一般的な非同期通信APIなどを実装する場合には使えない。
Notificationは非同期通信にも使えるが、データ個別の通知よりModelクラス全体の変更通知時に使う。
KVOはデータ個別の通知として使えMVCパターンの基本的な手段となりうるが、制御が複雑化することが多い。
blocksはややController側に処理が必要だが、ソースコードの可読性が良く制御はシンプルになる。(オススメ）


【実装方法例】--------------------------------------------
[View]
各種ViewにはGestureRecognizerでイベントを処理する。(標準のGesture機能を使用する)
UIButtonはtarget-actionを使いController側でイベントを処理する。(UIControl標準機能)
UITabelViewはdelegate(datasource)を使いController側でイベントを処理する。(標準機能)
キーボードやアプリバックグラウンドイベントなどはNotificationで処理する。(標準機能)
各種カスタムViewではイベントの内容を拡張/隠蔽するため、新たにプロトコルを設定しdelegateを実装したり、blocksでカスタムイベントに対する処理の設定を提供する。ポイントはカスタムイベントが複雑すぎないようにすること。例として、何らかのアニメーションを伴うViewの変更処理に対して、そのアニメーションの始まる前と終わった後それぞれにblocksで処理を設定出来るようにする。など。具体的には、Modelの変更通知によってViewがリロードされる際に、例えば画面に表示される数字やポイントを表す複数のアイコン等がアニメーション(数字がドラムロールのように動く。アイコンが独自アニメーションによって追加される等)をする前後に、自身のViewのpublicプロパティに保持した(又は初期化時に設定した)blocksを使うなど。
上記のような実装にすることで、例えばアニメーション後のblocksにViewが表示する(実際にはModelから参照した)データ(得点など)を、blocksの引数に設定しておき、Controller側ではblocksの引数で分岐処理をして、別々の子画面を表示させる。といった処理が実装可能となる。


